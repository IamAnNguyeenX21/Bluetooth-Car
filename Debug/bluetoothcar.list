
bluetoothcar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003160  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003298  08003298  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003298  08003298  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003298  08003298  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080032ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080032ac  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9de  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e6b  00000000  00000000  0002ca56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000992  00000000  00000000  0002f500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016fa7  00000000  00000000  0002fe92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2a5  00000000  00000000  00046e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008689b  00000000  00000000  000550de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032a4  00000000  00000000  000db97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000dec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003254 	.word	0x08003254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003254 	.word	0x08003254

0800014c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(uart_flag==0)
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <HAL_UART_RxCpltCallback+0x28>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d107      	bne.n	800016c <HAL_UART_RxCpltCallback+0x20>
	{
		uart_flag = 1;
 800015c:	4b05      	ldr	r3, [pc, #20]	; (8000174 <HAL_UART_RxCpltCallback+0x28>)
 800015e:	2201      	movs	r2, #1
 8000160:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &RxData, 1);
 8000162:	2201      	movs	r2, #1
 8000164:	4904      	ldr	r1, [pc, #16]	; (8000178 <HAL_UART_RxCpltCallback+0x2c>)
 8000166:	4805      	ldr	r0, [pc, #20]	; (800017c <HAL_UART_RxCpltCallback+0x30>)
 8000168:	f002 f9e1 	bl	800252e <HAL_UART_Receive_IT>
	}

}
 800016c:	bf00      	nop
 800016e:	3708      	adds	r7, #8
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}
 8000174:	20000100 	.word	0x20000100
 8000178:	20000101 	.word	0x20000101
 800017c:	200000b8 	.word	0x200000b8

08000180 <uart_handle>:
void uart_handle(uint8_t Data)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]

	if(uart_flag)
 800018a:	4b34      	ldr	r3, [pc, #208]	; (800025c <uart_handle+0xdc>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d05f      	beq.n	8000252 <uart_handle+0xd2>
	{
		switch (Data)
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	3b42      	subs	r3, #66	; 0x42
 8000196:	2b11      	cmp	r3, #17
 8000198:	d847      	bhi.n	800022a <uart_handle+0xaa>
 800019a:	a201      	add	r2, pc, #4	; (adr r2, 80001a0 <uart_handle+0x20>)
 800019c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001a0:	08000201 	.word	0x08000201
 80001a4:	0800022b 	.word	0x0800022b
 80001a8:	0800022b 	.word	0x0800022b
 80001ac:	0800022b 	.word	0x0800022b
 80001b0:	080001f3 	.word	0x080001f3
 80001b4:	0800022b 	.word	0x0800022b
 80001b8:	0800022b 	.word	0x0800022b
 80001bc:	0800022b 	.word	0x0800022b
 80001c0:	0800022b 	.word	0x0800022b
 80001c4:	0800022b 	.word	0x0800022b
 80001c8:	0800020f 	.word	0x0800020f
 80001cc:	0800022b 	.word	0x0800022b
 80001d0:	0800022b 	.word	0x0800022b
 80001d4:	0800022b 	.word	0x0800022b
 80001d8:	0800022b 	.word	0x0800022b
 80001dc:	0800022b 	.word	0x0800022b
 80001e0:	0800021d 	.word	0x0800021d
 80001e4:	080001e9 	.word	0x080001e9
			{
			case 'S':
				{
					Car_Control(Car_stop, 0);
 80001e8:	2100      	movs	r1, #0
 80001ea:	2000      	movs	r0, #0
 80001ec:	f002 fed6 	bl	8002f9c <Car_Control>
					break;
 80001f0:	e02c      	b.n	800024c <uart_handle+0xcc>
				}
			case 'F':
				{
					Car_Control(Car_Forward, speed);
 80001f2:	4b1b      	ldr	r3, [pc, #108]	; (8000260 <uart_handle+0xe0>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	4619      	mov	r1, r3
 80001f8:	2001      	movs	r0, #1
 80001fa:	f002 fecf 	bl	8002f9c <Car_Control>
					break;
 80001fe:	e025      	b.n	800024c <uart_handle+0xcc>
				}
			case 'B':
				{
					Car_Control(Car_Backward, speed);
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <uart_handle+0xe0>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	2002      	movs	r0, #2
 8000208:	f002 fec8 	bl	8002f9c <Car_Control>
					break;
 800020c:	e01e      	b.n	800024c <uart_handle+0xcc>
				}
			case 'L':
				{
					Car_Control(Car_Left, speed);
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <uart_handle+0xe0>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4619      	mov	r1, r3
 8000214:	2003      	movs	r0, #3
 8000216:	f002 fec1 	bl	8002f9c <Car_Control>
					break;
 800021a:	e017      	b.n	800024c <uart_handle+0xcc>
				}
			case 'R':
				{
					Car_Control(Car_Right, speed);
 800021c:	4b10      	ldr	r3, [pc, #64]	; (8000260 <uart_handle+0xe0>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	2004      	movs	r0, #4
 8000224:	f002 feba 	bl	8002f9c <Car_Control>
					break;
 8000228:	e010      	b.n	800024c <uart_handle+0xcc>
				}
			default:
				{
					if(Data >='0' && Data <= '9')
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b2f      	cmp	r3, #47	; 0x2f
 800022e:	d907      	bls.n	8000240 <uart_handle+0xc0>
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b39      	cmp	r3, #57	; 0x39
 8000234:	d804      	bhi.n	8000240 <uart_handle+0xc0>
					{
						speed = Data -'0';
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	3b30      	subs	r3, #48	; 0x30
 800023a:	b2da      	uxtb	r2, r3
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <uart_handle+0xe0>)
 800023e:	701a      	strb	r2, [r3, #0]
					}
					if(Data == 'q')
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b71      	cmp	r3, #113	; 0x71
 8000244:	d102      	bne.n	800024c <uart_handle+0xcc>
					{
						speed = 10;
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <uart_handle+0xe0>)
 8000248:	220a      	movs	r2, #10
 800024a:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		uart_flag = 0;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <uart_handle+0xdc>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
	}

}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000100 	.word	0x20000100
 8000260:	20000102 	.word	0x20000102

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 fb1c 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f81a 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f97c 	bl	800056c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000274:	f000 f858 	bl	8000328 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000278:	f000 f902 	bl	8000480 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800027c:	f000 f94c 	bl	8000518 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Car_Init();
 8000280:	f002 fef4 	bl	800306c <Car_Init>
  HAL_UART_Receive_IT(&huart1, &RxData, 1);
 8000284:	2201      	movs	r2, #1
 8000286:	4905      	ldr	r1, [pc, #20]	; (800029c <main+0x38>)
 8000288:	4805      	ldr	r0, [pc, #20]	; (80002a0 <main+0x3c>)
 800028a:	f002 f950 	bl	800252e <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uart_handle(RxData);
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <main+0x38>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff74 	bl	8000180 <uart_handle>
 8000298:	e7f9      	b.n	800028e <main+0x2a>
 800029a:	bf00      	nop
 800029c:	20000101 	.word	0x20000101
 80002a0:	200000b8 	.word	0x200000b8

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	2228      	movs	r2, #40	; 0x28
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 ffa2 	bl	80031fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2310      	movs	r3, #16
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002d6:	2300      	movs	r3, #0
 80002d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	f107 0318 	add.w	r3, r7, #24
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fe9b 	bl	8001020 <HAL_RCC_OscConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002f0:	f000 f97c 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f4:	230f      	movs	r3, #15
 80002f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	2302      	movs	r3, #2
 80002fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000304:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2102      	movs	r1, #2
 800030e:	4618      	mov	r0, r3
 8000310:	f001 f908 	bl	8001524 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800031a:	f000 f967 	bl	80005ec <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3740      	adds	r7, #64	; 0x40
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
	...

08000328 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b096      	sub	sp, #88	; 0x58
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]
 8000356:	615a      	str	r2, [r3, #20]
 8000358:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2220      	movs	r2, #32
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f002 ff4b 	bl	80031fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000366:	4b44      	ldr	r3, [pc, #272]	; (8000478 <MX_TIM1_Init+0x150>)
 8000368:	4a44      	ldr	r2, [pc, #272]	; (800047c <MX_TIM1_Init+0x154>)
 800036a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800036c:	4b42      	ldr	r3, [pc, #264]	; (8000478 <MX_TIM1_Init+0x150>)
 800036e:	223f      	movs	r2, #63	; 0x3f
 8000370:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000372:	4b41      	ldr	r3, [pc, #260]	; (8000478 <MX_TIM1_Init+0x150>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000378:	4b3f      	ldr	r3, [pc, #252]	; (8000478 <MX_TIM1_Init+0x150>)
 800037a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800037e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000380:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <MX_TIM1_Init+0x150>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000386:	4b3c      	ldr	r3, [pc, #240]	; (8000478 <MX_TIM1_Init+0x150>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800038c:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <MX_TIM1_Init+0x150>)
 800038e:	2200      	movs	r2, #0
 8000390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000392:	4839      	ldr	r0, [pc, #228]	; (8000478 <MX_TIM1_Init+0x150>)
 8000394:	f001 fa54 	bl	8001840 <HAL_TIM_Base_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800039e:	f000 f925 	bl	80005ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003ac:	4619      	mov	r1, r3
 80003ae:	4832      	ldr	r0, [pc, #200]	; (8000478 <MX_TIM1_Init+0x150>)
 80003b0:	f001 fc52 	bl	8001c58 <HAL_TIM_ConfigClockSource>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003ba:	f000 f917 	bl	80005ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003be:	482e      	ldr	r0, [pc, #184]	; (8000478 <MX_TIM1_Init+0x150>)
 80003c0:	f001 fa8d 	bl	80018de <HAL_TIM_PWM_Init>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003ca:	f000 f90f 	bl	80005ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ce:	2300      	movs	r3, #0
 80003d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d2:	2300      	movs	r3, #0
 80003d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003da:	4619      	mov	r1, r3
 80003dc:	4826      	ldr	r0, [pc, #152]	; (8000478 <MX_TIM1_Init+0x150>)
 80003de:	f001 ffa7 	bl	8002330 <HAL_TIMEx_MasterConfigSynchronization>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003e8:	f000 f900 	bl	80005ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003ec:	2360      	movs	r3, #96	; 0x60
 80003ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003f4:	2300      	movs	r3, #0
 80003f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003f8:	2300      	movs	r3, #0
 80003fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000400:	2300      	movs	r3, #0
 8000402:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000404:	2300      	movs	r3, #0
 8000406:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800040c:	2200      	movs	r2, #0
 800040e:	4619      	mov	r1, r3
 8000410:	4819      	ldr	r0, [pc, #100]	; (8000478 <MX_TIM1_Init+0x150>)
 8000412:	f001 fb5f 	bl	8001ad4 <HAL_TIM_PWM_ConfigChannel>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800041c:	f000 f8e6 	bl	80005ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000424:	2204      	movs	r2, #4
 8000426:	4619      	mov	r1, r3
 8000428:	4813      	ldr	r0, [pc, #76]	; (8000478 <MX_TIM1_Init+0x150>)
 800042a:	f001 fb53 	bl	8001ad4 <HAL_TIM_PWM_ConfigChannel>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000434:	f000 f8da 	bl	80005ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000440:	2300      	movs	r3, #0
 8000442:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800044c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000450:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000452:	2300      	movs	r3, #0
 8000454:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	4619      	mov	r1, r3
 800045a:	4807      	ldr	r0, [pc, #28]	; (8000478 <MX_TIM1_Init+0x150>)
 800045c:	f001 ffc6 	bl	80023ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000466:	f000 f8c1 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800046a:	4803      	ldr	r0, [pc, #12]	; (8000478 <MX_TIM1_Init+0x150>)
 800046c:	f000 f926 	bl	80006bc <HAL_TIM_MspPostInit>

}
 8000470:	bf00      	nop
 8000472:	3758      	adds	r7, #88	; 0x58
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000028 	.word	0x20000028
 800047c:	40012c00 	.word	0x40012c00

08000480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000494:	463b      	mov	r3, r7
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800049c:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <MX_TIM2_Init+0x94>)
 800049e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_TIM2_Init+0x94>)
 80004a6:	223f      	movs	r2, #63	; 0x3f
 80004a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004aa:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <MX_TIM2_Init+0x94>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_TIM2_Init+0x94>)
 80004b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004b8:	4b16      	ldr	r3, [pc, #88]	; (8000514 <MX_TIM2_Init+0x94>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_TIM2_Init+0x94>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004c4:	4813      	ldr	r0, [pc, #76]	; (8000514 <MX_TIM2_Init+0x94>)
 80004c6:	f001 f9bb 	bl	8001840 <HAL_TIM_Base_Init>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80004d0:	f000 f88c 	bl	80005ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	4619      	mov	r1, r3
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <MX_TIM2_Init+0x94>)
 80004e2:	f001 fbb9 	bl	8001c58 <HAL_TIM_ConfigClockSource>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80004ec:	f000 f87e 	bl	80005ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f0:	2300      	movs	r3, #0
 80004f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004f8:	463b      	mov	r3, r7
 80004fa:	4619      	mov	r1, r3
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_TIM2_Init+0x94>)
 80004fe:	f001 ff17 	bl	8002330 <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000508:	f000 f870 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000070 	.word	0x20000070

08000518 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_USART1_UART_Init+0x50>)
 8000520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000550:	f001 ff9d 	bl	800248e <HAL_UART_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800055a:	f000 f847 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000b8 	.word	0x200000b8
 8000568:	40013800 	.word	0x40013800

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MX_GPIO_Init+0x78>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <MX_GPIO_Init+0x78>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_GPIO_Init+0x78>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <MX_GPIO_Init+0x78>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a11      	ldr	r2, [pc, #68]	; (80005e4 <MX_GPIO_Init+0x78>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_GPIO_Init+0x78>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, In1_Pin|In3_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_GPIO_Init+0x7c>)
 80005b8:	f000 fd1a 	bl	8000ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : In1_Pin In3_Pin */
  GPIO_InitStruct.Pin = In1_Pin|In3_Pin;
 80005bc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	4619      	mov	r1, r3
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_GPIO_Init+0x7c>)
 80005d6:	f000 fb87 	bl	8000ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010c00 	.word	0x40010c00

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a14      	ldr	r2, [pc, #80]	; (8000654 <HAL_MspInit+0x5c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_MspInit+0x5c>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x5c>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x5c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_MspInit+0x60>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_MspInit+0x60>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	40010000 	.word	0x40010000

0800065c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <HAL_TIM_Base_MspInit+0x58>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d10c      	bne.n	8000688 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_TIM_Base_MspInit+0x5c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <HAL_TIM_Base_MspInit+0x5c>)
 8000674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <HAL_TIM_Base_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000686:	e010      	b.n	80006aa <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000690:	d10b      	bne.n	80006aa <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <HAL_TIM_Base_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <HAL_TIM_Base_MspInit+0x5c>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_TIM_Base_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40012c00 	.word	0x40012c00
 80006b8:	40021000 	.word	0x40021000

080006bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <HAL_TIM_MspPostInit+0x5c>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d118      	bne.n	800070e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_TIM_MspPostInit+0x60>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_TIM_MspPostInit+0x60>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <HAL_TIM_MspPostInit+0x60>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2302      	movs	r3, #2
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	; (8000720 <HAL_TIM_MspPostInit+0x64>)
 800070a:	f000 faed 	bl	8000ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40012c00 	.word	0x40012c00
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800

08000724 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a26      	ldr	r2, [pc, #152]	; (80007d8 <HAL_UART_MspInit+0xb4>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d145      	bne.n	80007d0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <HAL_UART_MspInit+0xb8>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a24      	ldr	r2, [pc, #144]	; (80007dc <HAL_UART_MspInit+0xb8>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <HAL_UART_MspInit+0xb8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <HAL_UART_MspInit+0xb8>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <HAL_UART_MspInit+0xb8>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <HAL_UART_MspInit+0xb8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0308 	and.w	r3, r3, #8
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000774:	2340      	movs	r3, #64	; 0x40
 8000776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4816      	ldr	r0, [pc, #88]	; (80007e0 <HAL_UART_MspInit+0xbc>)
 8000788:	f000 faae 	bl	8000ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4810      	ldr	r0, [pc, #64]	; (80007e0 <HAL_UART_MspInit+0xbc>)
 80007a0:	f000 faa2 	bl	8000ce8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <HAL_UART_MspInit+0xc0>)
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 80007b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <HAL_UART_MspInit+0xc0>)
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	2025      	movs	r0, #37	; 0x25
 80007c6:	f000 f9a6 	bl	8000b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ca:	2025      	movs	r0, #37	; 0x25
 80007cc:	f000 f9bf 	bl	8000b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40013800 	.word	0x40013800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010c00 	.word	0x40010c00
 80007e4:	40010000 	.word	0x40010000

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr

08000812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082e:	f000 f87f 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <USART1_IRQHandler+0x10>)
 800083e:	f001 fe9b 	bl	8002578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000b8 	.word	0x200000b8

0800084c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000858:	f7ff fff8 	bl	800084c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800085e:	490c      	ldr	r1, [pc, #48]	; (8000890 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000874:	4c09      	ldr	r4, [pc, #36]	; (800089c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000882:	f002 fcc3 	bl	800320c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000886:	f7ff fced 	bl	8000264 <main>
  bx lr
 800088a:	4770      	bx	lr
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000894:	080032a0 	.word	0x080032a0
  ldr r2, =_sbss
 8000898:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800089c:	20000128 	.word	0x20000128

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_Init+0x28>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_Init+0x28>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f923 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f808 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff fe9a 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40022000 	.word	0x40022000

080008d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x54>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x58>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f93b 	bl	8000b6a <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 f903 	bl	8000b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_InitTick+0x5c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	20000008 	.word	0x20000008
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x1c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x20>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <HAL_IncTick+0x20>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000008 	.word	0x20000008
 8000950:	20000104 	.word	0x20000104

08000954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_GetTick+0x10>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000104 	.word	0x20000104

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	db0b      	blt.n	80009f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	f003 021f 	and.w	r2, r3, #31
 80009e4:	4906      	ldr	r1, [pc, #24]	; (8000a00 <__NVIC_EnableIRQ+0x34>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	095b      	lsrs	r3, r3, #5
 80009ec:	2001      	movs	r0, #1
 80009ee:	fa00 f202 	lsl.w	r2, r0, r2
 80009f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100

08000a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	db0a      	blt.n	8000a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	490c      	ldr	r1, [pc, #48]	; (8000a50 <__NVIC_SetPriority+0x4c>)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	0112      	lsls	r2, r2, #4
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	440b      	add	r3, r1
 8000a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a2c:	e00a      	b.n	8000a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <__NVIC_SetPriority+0x50>)
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	0112      	lsls	r2, r2, #4
 8000a3e:	b2d2      	uxtb	r2, r2
 8000a40:	440b      	add	r3, r1
 8000a42:	761a      	strb	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b089      	sub	sp, #36	; 0x24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f1c3 0307 	rsb	r3, r3, #7
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	bf28      	it	cs
 8000a76:	2304      	movcs	r3, #4
 8000a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	2b06      	cmp	r3, #6
 8000a80:	d902      	bls.n	8000a88 <NVIC_EncodePriority+0x30>
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b03      	subs	r3, #3
 8000a86:	e000      	b.n	8000a8a <NVIC_EncodePriority+0x32>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43da      	mvns	r2, r3
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aaa:	43d9      	mvns	r1, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	4313      	orrs	r3, r2
         );
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3724      	adds	r7, #36	; 0x24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f7ff ff90 	bl	8000a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff2d 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b28:	f7ff ff42 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f7ff ff90 	bl	8000a58 <NVIC_EncodePriority>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff5f 	bl	8000a04 <__NVIC_SetPriority>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff35 	bl	80009cc <__NVIC_EnableIRQ>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffa2 	bl	8000abc <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d008      	beq.n	8000bac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e020      	b.n	8000bee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f022 020e 	bic.w	r2, r2, #14
 8000bba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0201 	bic.w	r2, r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bda:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2201      	movs	r2, #1
 8000be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d005      	beq.n	8000c1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2204      	movs	r2, #4
 8000c14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e051      	b.n	8000cc0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 020e 	bic.w	r2, r2, #14
 8000c2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0201 	bic.w	r2, r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a22      	ldr	r2, [pc, #136]	; (8000ccc <HAL_DMA_Abort_IT+0xd4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d029      	beq.n	8000c9a <HAL_DMA_Abort_IT+0xa2>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <HAL_DMA_Abort_IT+0xd8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d022      	beq.n	8000c96 <HAL_DMA_Abort_IT+0x9e>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <HAL_DMA_Abort_IT+0xdc>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d01a      	beq.n	8000c90 <HAL_DMA_Abort_IT+0x98>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_DMA_Abort_IT+0xe0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d012      	beq.n	8000c8a <HAL_DMA_Abort_IT+0x92>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_DMA_Abort_IT+0xe4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d00a      	beq.n	8000c84 <HAL_DMA_Abort_IT+0x8c>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_DMA_Abort_IT+0xe8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d102      	bne.n	8000c7e <HAL_DMA_Abort_IT+0x86>
 8000c78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c7c:	e00e      	b.n	8000c9c <HAL_DMA_Abort_IT+0xa4>
 8000c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c82:	e00b      	b.n	8000c9c <HAL_DMA_Abort_IT+0xa4>
 8000c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c88:	e008      	b.n	8000c9c <HAL_DMA_Abort_IT+0xa4>
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	e005      	b.n	8000c9c <HAL_DMA_Abort_IT+0xa4>
 8000c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c94:	e002      	b.n	8000c9c <HAL_DMA_Abort_IT+0xa4>
 8000c96:	2310      	movs	r3, #16
 8000c98:	e000      	b.n	8000c9c <HAL_DMA_Abort_IT+0xa4>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <HAL_DMA_Abort_IT+0xec>)
 8000c9e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	4798      	blx	r3
    } 
  }
  return status;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40020008 	.word	0x40020008
 8000cd0:	4002001c 	.word	0x4002001c
 8000cd4:	40020030 	.word	0x40020030
 8000cd8:	40020044 	.word	0x40020044
 8000cdc:	40020058 	.word	0x40020058
 8000ce0:	4002006c 	.word	0x4002006c
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b08b      	sub	sp, #44	; 0x2c
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e169      	b.n	8000fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f040 8158 	bne.w	8000fca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4a9a      	ldr	r2, [pc, #616]	; (8000f88 <HAL_GPIO_Init+0x2a0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d05e      	beq.n	8000de2 <HAL_GPIO_Init+0xfa>
 8000d24:	4a98      	ldr	r2, [pc, #608]	; (8000f88 <HAL_GPIO_Init+0x2a0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d875      	bhi.n	8000e16 <HAL_GPIO_Init+0x12e>
 8000d2a:	4a98      	ldr	r2, [pc, #608]	; (8000f8c <HAL_GPIO_Init+0x2a4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d058      	beq.n	8000de2 <HAL_GPIO_Init+0xfa>
 8000d30:	4a96      	ldr	r2, [pc, #600]	; (8000f8c <HAL_GPIO_Init+0x2a4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d86f      	bhi.n	8000e16 <HAL_GPIO_Init+0x12e>
 8000d36:	4a96      	ldr	r2, [pc, #600]	; (8000f90 <HAL_GPIO_Init+0x2a8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d052      	beq.n	8000de2 <HAL_GPIO_Init+0xfa>
 8000d3c:	4a94      	ldr	r2, [pc, #592]	; (8000f90 <HAL_GPIO_Init+0x2a8>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d869      	bhi.n	8000e16 <HAL_GPIO_Init+0x12e>
 8000d42:	4a94      	ldr	r2, [pc, #592]	; (8000f94 <HAL_GPIO_Init+0x2ac>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d04c      	beq.n	8000de2 <HAL_GPIO_Init+0xfa>
 8000d48:	4a92      	ldr	r2, [pc, #584]	; (8000f94 <HAL_GPIO_Init+0x2ac>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d863      	bhi.n	8000e16 <HAL_GPIO_Init+0x12e>
 8000d4e:	4a92      	ldr	r2, [pc, #584]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d046      	beq.n	8000de2 <HAL_GPIO_Init+0xfa>
 8000d54:	4a90      	ldr	r2, [pc, #576]	; (8000f98 <HAL_GPIO_Init+0x2b0>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d85d      	bhi.n	8000e16 <HAL_GPIO_Init+0x12e>
 8000d5a:	2b12      	cmp	r3, #18
 8000d5c:	d82a      	bhi.n	8000db4 <HAL_GPIO_Init+0xcc>
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d859      	bhi.n	8000e16 <HAL_GPIO_Init+0x12e>
 8000d62:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <HAL_GPIO_Init+0x80>)
 8000d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d68:	08000de3 	.word	0x08000de3
 8000d6c:	08000dbd 	.word	0x08000dbd
 8000d70:	08000dcf 	.word	0x08000dcf
 8000d74:	08000e11 	.word	0x08000e11
 8000d78:	08000e17 	.word	0x08000e17
 8000d7c:	08000e17 	.word	0x08000e17
 8000d80:	08000e17 	.word	0x08000e17
 8000d84:	08000e17 	.word	0x08000e17
 8000d88:	08000e17 	.word	0x08000e17
 8000d8c:	08000e17 	.word	0x08000e17
 8000d90:	08000e17 	.word	0x08000e17
 8000d94:	08000e17 	.word	0x08000e17
 8000d98:	08000e17 	.word	0x08000e17
 8000d9c:	08000e17 	.word	0x08000e17
 8000da0:	08000e17 	.word	0x08000e17
 8000da4:	08000e17 	.word	0x08000e17
 8000da8:	08000e17 	.word	0x08000e17
 8000dac:	08000dc5 	.word	0x08000dc5
 8000db0:	08000dd9 	.word	0x08000dd9
 8000db4:	4a79      	ldr	r2, [pc, #484]	; (8000f9c <HAL_GPIO_Init+0x2b4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d013      	beq.n	8000de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dba:	e02c      	b.n	8000e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e029      	b.n	8000e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	623b      	str	r3, [r7, #32]
          break;
 8000dcc:	e024      	b.n	8000e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	3308      	adds	r3, #8
 8000dd4:	623b      	str	r3, [r7, #32]
          break;
 8000dd6:	e01f      	b.n	8000e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	330c      	adds	r3, #12
 8000dde:	623b      	str	r3, [r7, #32]
          break;
 8000de0:	e01a      	b.n	8000e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dea:	2304      	movs	r3, #4
 8000dec:	623b      	str	r3, [r7, #32]
          break;
 8000dee:	e013      	b.n	8000e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d105      	bne.n	8000e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	611a      	str	r2, [r3, #16]
          break;
 8000e02:	e009      	b.n	8000e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e04:	2308      	movs	r3, #8
 8000e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69fa      	ldr	r2, [r7, #28]
 8000e0c:	615a      	str	r2, [r3, #20]
          break;
 8000e0e:	e003      	b.n	8000e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
          break;
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x130>
          break;
 8000e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2bff      	cmp	r3, #255	; 0xff
 8000e1c:	d801      	bhi.n	8000e22 <HAL_GPIO_Init+0x13a>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	e001      	b.n	8000e26 <HAL_GPIO_Init+0x13e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3304      	adds	r3, #4
 8000e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	2bff      	cmp	r3, #255	; 0xff
 8000e2c:	d802      	bhi.n	8000e34 <HAL_GPIO_Init+0x14c>
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	e002      	b.n	8000e3a <HAL_GPIO_Init+0x152>
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	3b08      	subs	r3, #8
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	210f      	movs	r1, #15
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	6a39      	ldr	r1, [r7, #32]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	431a      	orrs	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80b1 	beq.w	8000fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e68:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <HAL_GPIO_Init+0x2b8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a4c      	ldr	r2, [pc, #304]	; (8000fa0 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <HAL_GPIO_Init+0x2b8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e80:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <HAL_GPIO_Init+0x2bc>)
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a40      	ldr	r2, [pc, #256]	; (8000fa8 <HAL_GPIO_Init+0x2c0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d013      	beq.n	8000ed4 <HAL_GPIO_Init+0x1ec>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a3f      	ldr	r2, [pc, #252]	; (8000fac <HAL_GPIO_Init+0x2c4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d00d      	beq.n	8000ed0 <HAL_GPIO_Init+0x1e8>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a3e      	ldr	r2, [pc, #248]	; (8000fb0 <HAL_GPIO_Init+0x2c8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d007      	beq.n	8000ecc <HAL_GPIO_Init+0x1e4>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a3d      	ldr	r2, [pc, #244]	; (8000fb4 <HAL_GPIO_Init+0x2cc>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_GPIO_Init+0x1e0>
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e006      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ec8:	2304      	movs	r3, #4
 8000eca:	e004      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e002      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e000      	b.n	8000ed6 <HAL_GPIO_Init+0x1ee>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed8:	f002 0203 	and.w	r2, r2, #3
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	4093      	lsls	r3, r2
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ee6:	492f      	ldr	r1, [pc, #188]	; (8000fa4 <HAL_GPIO_Init+0x2bc>)
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	492c      	ldr	r1, [pc, #176]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	4928      	ldr	r1, [pc, #160]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d006      	beq.n	8000f36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	4922      	ldr	r1, [pc, #136]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	60cb      	str	r3, [r1, #12]
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	491e      	ldr	r1, [pc, #120]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d006      	beq.n	8000f5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	4918      	ldr	r1, [pc, #96]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4914      	ldr	r1, [pc, #80]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f68:	4013      	ands	r3, r2
 8000f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d021      	beq.n	8000fbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	600b      	str	r3, [r1, #0]
 8000f84:	e021      	b.n	8000fca <HAL_GPIO_Init+0x2e2>
 8000f86:	bf00      	nop
 8000f88:	10320000 	.word	0x10320000
 8000f8c:	10310000 	.word	0x10310000
 8000f90:	10220000 	.word	0x10220000
 8000f94:	10210000 	.word	0x10210000
 8000f98:	10120000 	.word	0x10120000
 8000f9c:	10110000 	.word	0x10110000
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010000 	.word	0x40010000
 8000fa8:	40010800 	.word	0x40010800
 8000fac:	40010c00 	.word	0x40010c00
 8000fb0:	40011000 	.word	0x40011000
 8000fb4:	40011400 	.word	0x40011400
 8000fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_GPIO_Init+0x304>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4909      	ldr	r1, [pc, #36]	; (8000fec <HAL_GPIO_Init+0x304>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3301      	adds	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f47f ae8e 	bne.w	8000cfc <HAL_GPIO_Init+0x14>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	372c      	adds	r7, #44	; 0x2c
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40010400 	.word	0x40010400

08000ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001000:	787b      	ldrb	r3, [r7, #1]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800100c:	e003      	b.n	8001016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	041a      	lsls	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	611a      	str	r2, [r3, #16]
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e272      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8087 	beq.w	800114e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001040:	4b92      	ldr	r3, [pc, #584]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b04      	cmp	r3, #4
 800104a:	d00c      	beq.n	8001066 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800104c:	4b8f      	ldr	r3, [pc, #572]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	d112      	bne.n	800107e <HAL_RCC_OscConfig+0x5e>
 8001058:	4b8c      	ldr	r3, [pc, #560]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001064:	d10b      	bne.n	800107e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001066:	4b89      	ldr	r3, [pc, #548]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d06c      	beq.n	800114c <HAL_RCC_OscConfig+0x12c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d168      	bne.n	800114c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e24c      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001086:	d106      	bne.n	8001096 <HAL_RCC_OscConfig+0x76>
 8001088:	4b80      	ldr	r3, [pc, #512]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800108e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	e02e      	b.n	80010f4 <HAL_RCC_OscConfig+0xd4>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x98>
 800109e:	4b7b      	ldr	r3, [pc, #492]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a7a      	ldr	r2, [pc, #488]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	4b78      	ldr	r3, [pc, #480]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a77      	ldr	r2, [pc, #476]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01d      	b.n	80010f4 <HAL_RCC_OscConfig+0xd4>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0xbc>
 80010c2:	4b72      	ldr	r3, [pc, #456]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a71      	ldr	r2, [pc, #452]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b6f      	ldr	r3, [pc, #444]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a6e      	ldr	r2, [pc, #440]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e00b      	b.n	80010f4 <HAL_RCC_OscConfig+0xd4>
 80010dc:	4b6b      	ldr	r3, [pc, #428]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a6a      	ldr	r2, [pc, #424]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b68      	ldr	r3, [pc, #416]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a67      	ldr	r2, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fc2a 	bl	8000954 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fc26 	bl	8000954 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e200      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	4b5d      	ldr	r3, [pc, #372]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0xe4>
 8001122:	e014      	b.n	800114e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fc16 	bl	8000954 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fc12 	bl	8000954 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e1ec      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	4b53      	ldr	r3, [pc, #332]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x10c>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d063      	beq.n	8001222 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800115a:	4b4c      	ldr	r3, [pc, #304]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001166:	4b49      	ldr	r3, [pc, #292]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 030c 	and.w	r3, r3, #12
 800116e:	2b08      	cmp	r3, #8
 8001170:	d11c      	bne.n	80011ac <HAL_RCC_OscConfig+0x18c>
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d116      	bne.n	80011ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	4b43      	ldr	r3, [pc, #268]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_RCC_OscConfig+0x176>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e1c0      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4939      	ldr	r1, [pc, #228]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	e03a      	b.n	8001222 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <HAL_RCC_OscConfig+0x270>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fbcb 	bl	8000954 <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fbc7 	bl	8000954 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e1a1      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4927      	ldr	r1, [pc, #156]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	600b      	str	r3, [r1, #0]
 80011f4:	e015      	b.n	8001222 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f6:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_RCC_OscConfig+0x270>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fbaa 	bl	8000954 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fba6 	bl	8000954 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e180      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d03a      	beq.n	80012a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d019      	beq.n	800126a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_RCC_OscConfig+0x274>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123c:	f7ff fb8a 	bl	8000954 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fb86 	bl	8000954 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e160      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_RCC_OscConfig+0x26c>)
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001262:	2001      	movs	r0, #1
 8001264:	f000 face 	bl	8001804 <RCC_Delay>
 8001268:	e01c      	b.n	80012a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_RCC_OscConfig+0x274>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001270:	f7ff fb70 	bl	8000954 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001276:	e00f      	b.n	8001298 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001278:	f7ff fb6c 	bl	8000954 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d908      	bls.n	8001298 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e146      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	42420000 	.word	0x42420000
 8001294:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001298:	4b92      	ldr	r3, [pc, #584]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1e9      	bne.n	8001278 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80a6 	beq.w	80013fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b6:	4b8b      	ldr	r3, [pc, #556]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10d      	bne.n	80012de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c2:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a87      	ldr	r2, [pc, #540]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b85      	ldr	r3, [pc, #532]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012da:	2301      	movs	r3, #1
 80012dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012de:	4b82      	ldr	r3, [pc, #520]	; (80014e8 <HAL_RCC_OscConfig+0x4c8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d118      	bne.n	800131c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ea:	4b7f      	ldr	r3, [pc, #508]	; (80014e8 <HAL_RCC_OscConfig+0x4c8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7e      	ldr	r2, [pc, #504]	; (80014e8 <HAL_RCC_OscConfig+0x4c8>)
 80012f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fb2d 	bl	8000954 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012fe:	f7ff fb29 	bl	8000954 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b64      	cmp	r3, #100	; 0x64
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e103      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	4b75      	ldr	r3, [pc, #468]	; (80014e8 <HAL_RCC_OscConfig+0x4c8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x312>
 8001324:	4b6f      	ldr	r3, [pc, #444]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4a6e      	ldr	r2, [pc, #440]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6213      	str	r3, [r2, #32]
 8001330:	e02d      	b.n	800138e <HAL_RCC_OscConfig+0x36e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x334>
 800133a:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a69      	ldr	r2, [pc, #420]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a66      	ldr	r2, [pc, #408]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6213      	str	r3, [r2, #32]
 8001352:	e01c      	b.n	800138e <HAL_RCC_OscConfig+0x36e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0x356>
 800135c:	4b61      	ldr	r3, [pc, #388]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a60      	ldr	r2, [pc, #384]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4a5d      	ldr	r2, [pc, #372]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6213      	str	r3, [r2, #32]
 8001374:	e00b      	b.n	800138e <HAL_RCC_OscConfig+0x36e>
 8001376:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a5a      	ldr	r2, [pc, #360]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	4b58      	ldr	r3, [pc, #352]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	4a57      	ldr	r2, [pc, #348]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d015      	beq.n	80013c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fadd 	bl	8000954 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fad9 	bl	8000954 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e0b1      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0ee      	beq.n	800139e <HAL_RCC_OscConfig+0x37e>
 80013c0:	e014      	b.n	80013ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fac7 	bl	8000954 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fac3 	bl	8000954 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e09b      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ee      	bne.n	80013ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d105      	bne.n	80013fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f2:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a3b      	ldr	r2, [pc, #236]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8087 	beq.w	8001516 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b08      	cmp	r3, #8
 8001412:	d061      	beq.n	80014d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d146      	bne.n	80014aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141c:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_RCC_OscConfig+0x4cc>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fa97 	bl	8000954 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fa93 	bl	8000954 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e06d      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001450:	d108      	bne.n	8001464 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4921      	ldr	r1, [pc, #132]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a19      	ldr	r1, [r3, #32]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	430b      	orrs	r3, r1
 8001476:	491b      	ldr	r1, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_RCC_OscConfig+0x4cc>)
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fa67 	bl	8000954 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fa63 	bl	8000954 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e03d      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x46a>
 80014a8:	e035      	b.n	8001516 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_RCC_OscConfig+0x4cc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fa50 	bl	8000954 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fa4c 	bl	8000954 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e026      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x498>
 80014d6:	e01e      	b.n	8001516 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e019      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40007000 	.word	0x40007000
 80014ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_RCC_OscConfig+0x500>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	429a      	cmp	r2, r3
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0d0      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d910      	bls.n	8001568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 0207 	bic.w	r2, r3, #7
 800154e:	4965      	ldr	r1, [pc, #404]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0b8      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800158a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0308 	and.w	r3, r3, #8
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a4:	4b50      	ldr	r3, [pc, #320]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	494d      	ldr	r1, [pc, #308]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d040      	beq.n	8001644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d115      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e07f      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e073      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e06b      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f023 0203 	bic.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4936      	ldr	r1, [pc, #216]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001614:	f7ff f99e 	bl	8000954 <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	e00a      	b.n	8001632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161c:	f7ff f99a 	bl	8000954 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e053      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 020c 	and.w	r2, r3, #12
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	429a      	cmp	r2, r3
 8001642:	d1eb      	bne.n	800161c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d210      	bcs.n	8001674 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	4922      	ldr	r1, [pc, #136]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e032      	b.n	80016da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	4916      	ldr	r1, [pc, #88]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800169e:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	490e      	ldr	r1, [pc, #56]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016b2:	f000 f821 	bl	80016f8 <HAL_RCC_GetSysClockFreq>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	490a      	ldr	r1, [pc, #40]	; (80016ec <HAL_RCC_ClockConfig+0x1c8>)
 80016c4:	5ccb      	ldrb	r3, [r1, r3]
 80016c6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_RCC_ClockConfig+0x1cc>)
 80016cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_ClockConfig+0x1d0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f8fc 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40022000 	.word	0x40022000
 80016e8:	40021000 	.word	0x40021000
 80016ec:	0800326c 	.word	0x0800326c
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_RCC_GetSysClockFreq+0x94>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b04      	cmp	r3, #4
 8001720:	d002      	beq.n	8001728 <HAL_RCC_GetSysClockFreq+0x30>
 8001722:	2b08      	cmp	r3, #8
 8001724:	d003      	beq.n	800172e <HAL_RCC_GetSysClockFreq+0x36>
 8001726:	e027      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_RCC_GetSysClockFreq+0x98>)
 800172a:	613b      	str	r3, [r7, #16]
      break;
 800172c:	e027      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	0c9b      	lsrs	r3, r3, #18
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001738:	5cd3      	ldrb	r3, [r2, r3]
 800173a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d010      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <HAL_RCC_GetSysClockFreq+0x94>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	0c5b      	lsrs	r3, r3, #17
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
 8001754:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <HAL_RCC_GetSysClockFreq+0x98>)
 800175a:	fb03 f202 	mul.w	r2, r3, r2
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e004      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a0c      	ldr	r2, [pc, #48]	; (800179c <HAL_RCC_GetSysClockFreq+0xa4>)
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	613b      	str	r3, [r7, #16]
      break;
 8001776:	e002      	b.n	800177e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_RCC_GetSysClockFreq+0x98>)
 800177a:	613b      	str	r3, [r7, #16]
      break;
 800177c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800177e:	693b      	ldr	r3, [r7, #16]
}
 8001780:	4618      	mov	r0, r3
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	007a1200 	.word	0x007a1200
 8001794:	08003284 	.word	0x08003284
 8001798:	08003294 	.word	0x08003294
 800179c:	003d0900 	.word	0x003d0900

080017a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017a4:	4b02      	ldr	r3, [pc, #8]	; (80017b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	20000000 	.word	0x20000000

080017b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017b8:	f7ff fff2 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017bc:	4602      	mov	r2, r0
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	4903      	ldr	r1, [pc, #12]	; (80017d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ca:	5ccb      	ldrb	r3, [r1, r3]
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	0800327c 	.word	0x0800327c

080017dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_RCC_GetHCLKFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	0adb      	lsrs	r3, r3, #11
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	4903      	ldr	r1, [pc, #12]	; (8001800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	0800327c 	.word	0x0800327c

08001804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <RCC_Delay+0x34>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <RCC_Delay+0x38>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0a5b      	lsrs	r3, r3, #9
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001820:	bf00      	nop
  }
  while (Delay --);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	60fa      	str	r2, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <RCC_Delay+0x1c>
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000000 	.word	0x20000000
 800183c:	10624dd3 	.word	0x10624dd3

08001840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e041      	b.n	80018d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe fef8 	bl	800065c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2202      	movs	r2, #2
 8001870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3304      	adds	r3, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4610      	mov	r0, r2
 8001880:	f000 fab2 	bl	8001de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e041      	b.n	8001974 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d106      	bne.n	800190a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f839 	bl	800197c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3304      	adds	r3, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f000 fa63 	bl	8001de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
	...

08001990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <HAL_TIM_PWM_Start+0x24>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	bf14      	ite	ne
 80019ac:	2301      	movne	r3, #1
 80019ae:	2300      	moveq	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e022      	b.n	80019fa <HAL_TIM_PWM_Start+0x6a>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d109      	bne.n	80019ce <HAL_TIM_PWM_Start+0x3e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	bf14      	ite	ne
 80019c6:	2301      	movne	r3, #1
 80019c8:	2300      	moveq	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	e015      	b.n	80019fa <HAL_TIM_PWM_Start+0x6a>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d109      	bne.n	80019e8 <HAL_TIM_PWM_Start+0x58>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	bf14      	ite	ne
 80019e0:	2301      	movne	r3, #1
 80019e2:	2300      	moveq	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	e008      	b.n	80019fa <HAL_TIM_PWM_Start+0x6a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e05e      	b.n	8001ac0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d104      	bne.n	8001a12 <HAL_TIM_PWM_Start+0x82>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a10:	e013      	b.n	8001a3a <HAL_TIM_PWM_Start+0xaa>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d104      	bne.n	8001a22 <HAL_TIM_PWM_Start+0x92>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a20:	e00b      	b.n	8001a3a <HAL_TIM_PWM_Start+0xaa>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d104      	bne.n	8001a32 <HAL_TIM_PWM_Start+0xa2>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a30:	e003      	b.n	8001a3a <HAL_TIM_PWM_Start+0xaa>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fc50 	bl	80022e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <HAL_TIM_PWM_Start+0x138>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d107      	bne.n	8001a62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <HAL_TIM_PWM_Start+0x138>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00e      	beq.n	8001a8a <HAL_TIM_PWM_Start+0xfa>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a74:	d009      	beq.n	8001a8a <HAL_TIM_PWM_Start+0xfa>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_TIM_PWM_Start+0x13c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_TIM_PWM_Start+0xfa>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_TIM_PWM_Start+0x140>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d111      	bne.n	8001aae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d010      	beq.n	8001abe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aac:	e007      	b.n	8001abe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40000800 	.word	0x40000800

08001ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e0ae      	b.n	8001c50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	f200 809f 	bhi.w	8001c40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001b02:	a201      	add	r2, pc, #4	; (adr r2, 8001b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b3d 	.word	0x08001b3d
 8001b0c:	08001c41 	.word	0x08001c41
 8001b10:	08001c41 	.word	0x08001c41
 8001b14:	08001c41 	.word	0x08001c41
 8001b18:	08001b7d 	.word	0x08001b7d
 8001b1c:	08001c41 	.word	0x08001c41
 8001b20:	08001c41 	.word	0x08001c41
 8001b24:	08001c41 	.word	0x08001c41
 8001b28:	08001bbf 	.word	0x08001bbf
 8001b2c:	08001c41 	.word	0x08001c41
 8001b30:	08001c41 	.word	0x08001c41
 8001b34:	08001c41 	.word	0x08001c41
 8001b38:	08001bff 	.word	0x08001bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 f9b2 	bl	8001eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0208 	orr.w	r2, r2, #8
 8001b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0204 	bic.w	r2, r2, #4
 8001b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6999      	ldr	r1, [r3, #24]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	619a      	str	r2, [r3, #24]
      break;
 8001b7a:	e064      	b.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f9f8 	bl	8001f78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6999      	ldr	r1, [r3, #24]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	021a      	lsls	r2, r3, #8
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	619a      	str	r2, [r3, #24]
      break;
 8001bbc:	e043      	b.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68b9      	ldr	r1, [r7, #8]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fa41 	bl	800204c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	69da      	ldr	r2, [r3, #28]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0208 	orr.w	r2, r2, #8
 8001bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0204 	bic.w	r2, r2, #4
 8001be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69d9      	ldr	r1, [r3, #28]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	61da      	str	r2, [r3, #28]
      break;
 8001bfc:	e023      	b.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68b9      	ldr	r1, [r7, #8]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fa8b 	bl	8002120 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69d9      	ldr	r1, [r3, #28]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	021a      	lsls	r2, r3, #8
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	61da      	str	r2, [r3, #28]
      break;
 8001c3e:	e002      	b.n	8001c46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
      break;
 8001c44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_TIM_ConfigClockSource+0x1c>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e0b4      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x186>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cac:	d03e      	beq.n	8001d2c <HAL_TIM_ConfigClockSource+0xd4>
 8001cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb2:	f200 8087 	bhi.w	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cba:	f000 8086 	beq.w	8001dca <HAL_TIM_ConfigClockSource+0x172>
 8001cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc2:	d87f      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cc4:	2b70      	cmp	r3, #112	; 0x70
 8001cc6:	d01a      	beq.n	8001cfe <HAL_TIM_ConfigClockSource+0xa6>
 8001cc8:	2b70      	cmp	r3, #112	; 0x70
 8001cca:	d87b      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ccc:	2b60      	cmp	r3, #96	; 0x60
 8001cce:	d050      	beq.n	8001d72 <HAL_TIM_ConfigClockSource+0x11a>
 8001cd0:	2b60      	cmp	r3, #96	; 0x60
 8001cd2:	d877      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cd4:	2b50      	cmp	r3, #80	; 0x50
 8001cd6:	d03c      	beq.n	8001d52 <HAL_TIM_ConfigClockSource+0xfa>
 8001cd8:	2b50      	cmp	r3, #80	; 0x50
 8001cda:	d873      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	d058      	beq.n	8001d92 <HAL_TIM_ConfigClockSource+0x13a>
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d86f      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ce4:	2b30      	cmp	r3, #48	; 0x30
 8001ce6:	d064      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x15a>
 8001ce8:	2b30      	cmp	r3, #48	; 0x30
 8001cea:	d86b      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d060      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x15a>
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	d867      	bhi.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d05c      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x15a>
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d05a      	beq.n	8001db2 <HAL_TIM_ConfigClockSource+0x15a>
 8001cfc:	e062      	b.n	8001dc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d0e:	f000 facc 	bl	80022aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	609a      	str	r2, [r3, #8]
      break;
 8001d2a:	e04f      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d3c:	f000 fab5 	bl	80022aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d4e:	609a      	str	r2, [r3, #8]
      break;
 8001d50:	e03c      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f000 fa2c 	bl	80021bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2150      	movs	r1, #80	; 0x50
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fa83 	bl	8002276 <TIM_ITRx_SetConfig>
      break;
 8001d70:	e02c      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f000 fa4a 	bl	8002218 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2160      	movs	r1, #96	; 0x60
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fa73 	bl	8002276 <TIM_ITRx_SetConfig>
      break;
 8001d90:	e01c      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f000 fa0c 	bl	80021bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2140      	movs	r1, #64	; 0x40
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fa63 	bl	8002276 <TIM_ITRx_SetConfig>
      break;
 8001db0:	e00c      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f000 fa5a 	bl	8002276 <TIM_ITRx_SetConfig>
      break;
 8001dc2:	e003      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc8:	e000      	b.n	8001dcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001dca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <TIM_Base_SetConfig+0xb8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00b      	beq.n	8001e18 <TIM_Base_SetConfig+0x30>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e06:	d007      	beq.n	8001e18 <TIM_Base_SetConfig+0x30>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <TIM_Base_SetConfig+0xbc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <TIM_Base_SetConfig+0x30>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <TIM_Base_SetConfig+0xc0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d108      	bne.n	8001e2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <TIM_Base_SetConfig+0xb8>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00b      	beq.n	8001e4a <TIM_Base_SetConfig+0x62>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d007      	beq.n	8001e4a <TIM_Base_SetConfig+0x62>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a19      	ldr	r2, [pc, #100]	; (8001ea4 <TIM_Base_SetConfig+0xbc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <TIM_Base_SetConfig+0x62>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <TIM_Base_SetConfig+0xc0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <TIM_Base_SetConfig+0xb8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d103      	bne.n	8001e90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	615a      	str	r2, [r3, #20]
}
 8001e96:	bf00      	nop
 8001e98:	3714      	adds	r7, #20
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40000800 	.word	0x40000800

08001eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f023 0201 	bic.w	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 0303 	bic.w	r3, r3, #3
 8001ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f023 0302 	bic.w	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <TIM_OC1_SetConfig+0xc8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d10c      	bne.n	8001f22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f023 0308 	bic.w	r3, r3, #8
 8001f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <TIM_OC1_SetConfig+0xc8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d111      	bne.n	8001f4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	621a      	str	r2, [r3, #32]
}
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	40012c00 	.word	0x40012c00

08001f78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f023 0210 	bic.w	r2, r3, #16
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	021b      	lsls	r3, r3, #8
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f023 0320 	bic.w	r3, r3, #32
 8001fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	; (8002048 <TIM_OC2_SetConfig+0xd0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d10d      	bne.n	8001ff4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	011b      	lsls	r3, r3, #4
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ff2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <TIM_OC2_SetConfig+0xd0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d113      	bne.n	8002024 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800200a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	621a      	str	r2, [r3, #32]
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40012c00 	.word	0x40012c00

0800204c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0303 	bic.w	r3, r3, #3
 8002082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1d      	ldr	r2, [pc, #116]	; (800211c <TIM_OC3_SetConfig+0xd0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10d      	bne.n	80020c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <TIM_OC3_SetConfig+0xd0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d113      	bne.n	80020f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	621a      	str	r2, [r3, #32]
}
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40012c00 	.word	0x40012c00

08002120 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800214e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800216a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	031b      	lsls	r3, r3, #12
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <TIM_OC4_SetConfig+0x98>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d109      	bne.n	8002194 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	019b      	lsls	r3, r3, #6
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	621a      	str	r2, [r3, #32]
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40012c00 	.word	0x40012c00

080021bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021bc:	b480      	push	{r7}
 80021be:	b087      	sub	sp, #28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f023 0201 	bic.w	r2, r3, #1
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f023 030a 	bic.w	r3, r3, #10
 80021f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	621a      	str	r2, [r3, #32]
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	f023 0210 	bic.w	r2, r3, #16
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	031b      	lsls	r3, r3, #12
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002254:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	621a      	str	r2, [r3, #32]
}
 800226c:	bf00      	nop
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4313      	orrs	r3, r2
 8002294:	f043 0307 	orr.w	r3, r3, #7
 8002298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	609a      	str	r2, [r3, #8]
}
 80022a0:	bf00      	nop
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b087      	sub	sp, #28
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	021a      	lsls	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	609a      	str	r2, [r3, #8]
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 031f 	and.w	r3, r3, #31
 80022fa:	2201      	movs	r2, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a1a      	ldr	r2, [r3, #32]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a1a      	ldr	r2, [r3, #32]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	431a      	orrs	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	621a      	str	r2, [r3, #32]
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002344:	2302      	movs	r3, #2
 8002346:	e046      	b.n	80023d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a16      	ldr	r2, [pc, #88]	; (80023e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d00e      	beq.n	80023aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002394:	d009      	beq.n	80023aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d004      	beq.n	80023aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d10c      	bne.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40000400 	.word	0x40000400
 80023e8:	40000800 	.word	0x40000800

080023ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002404:	2302      	movs	r3, #2
 8002406:	e03d      	b.n	8002484 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e042      	b.n	8002526 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7fe f935 	bl	8000724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2224      	movs	r2, #36	; 0x24
 80024be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fcd4 	bl	8002e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002506:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	d112      	bne.n	800256e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_UART_Receive_IT+0x26>
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e00b      	b.n	8002570 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	461a      	mov	r2, r3
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fab6 	bl	8002ad6 <UART_Start_Receive_IT>
 800256a:	4603      	mov	r3, r0
 800256c:	e000      	b.n	8002570 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0ba      	sub	sp, #232	; 0xe8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10f      	bne.n	80025de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_UART_IRQHandler+0x66>
 80025ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 fb93 	bl	8002d02 <UART_Receive_IT>
      return;
 80025dc:	e25b      	b.n	8002a96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80de 	beq.w	80027a4 <HAL_UART_IRQHandler+0x22c>
 80025e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d106      	bne.n	8002602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80d1 	beq.w	80027a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_UART_IRQHandler+0xae>
 800260e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_UART_IRQHandler+0xd2>
 8002632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f043 0202 	orr.w	r2, r3, #2
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_UART_IRQHandler+0xf6>
 8002656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	f043 0204 	orr.w	r2, r3, #4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d011      	beq.n	800269e <HAL_UART_IRQHandler+0x126>
 800267a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f043 0208 	orr.w	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 81f2 	beq.w	8002a8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_UART_IRQHandler+0x14e>
 80026b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fb1e 	bl	8002d02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_UART_IRQHandler+0x17a>
 80026ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d04f      	beq.n	8002792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa28 	bl	8002b48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d041      	beq.n	800278a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3314      	adds	r3, #20
 800270c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002710:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002714:	e853 3f00 	ldrex	r3, [r3]
 8002718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800271c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3314      	adds	r3, #20
 800272e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002732:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002736:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800273a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800273e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002742:	e841 2300 	strex	r3, r2, [r1]
 8002746:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800274a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1d9      	bne.n	8002706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d013      	beq.n	8002782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	4a7e      	ldr	r2, [pc, #504]	; (8002958 <HAL_UART_IRQHandler+0x3e0>)
 8002760:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fa46 	bl	8000bf8 <HAL_DMA_Abort_IT>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800277c:	4610      	mov	r0, r2
 800277e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002780:	e00e      	b.n	80027a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f993 	bl	8002aae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002788:	e00a      	b.n	80027a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f98f 	bl	8002aae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	e006      	b.n	80027a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f98b 	bl	8002aae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800279e:	e175      	b.n	8002a8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a0:	bf00      	nop
    return;
 80027a2:	e173      	b.n	8002a8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	f040 814f 	bne.w	8002a4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8148 	beq.w	8002a4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 8141 	beq.w	8002a4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80b6 	beq.w	800295c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 8145 	beq.w	8002a90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800280a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800280e:	429a      	cmp	r2, r3
 8002810:	f080 813e 	bcs.w	8002a90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800281a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b20      	cmp	r3, #32
 8002824:	f000 8088 	beq.w	8002938 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002832:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002836:	e853 3f00 	ldrex	r3, [r3]
 800283a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800283e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002846:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002854:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002858:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002860:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002864:	e841 2300 	strex	r3, r2, [r1]
 8002868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800286c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1d9      	bne.n	8002828 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3314      	adds	r3, #20
 800287a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287e:	e853 3f00 	ldrex	r3, [r3]
 8002882:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3314      	adds	r3, #20
 8002894:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002898:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800289c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028a4:	e841 2300 	strex	r3, r2, [r1]
 80028a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e1      	bne.n	8002874 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3314      	adds	r3, #20
 80028b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028ba:	e853 3f00 	ldrex	r3, [r3]
 80028be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3314      	adds	r3, #20
 80028d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028dc:	e841 2300 	strex	r3, r2, [r1]
 80028e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e3      	bne.n	80028b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	330c      	adds	r3, #12
 80028fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002900:	e853 3f00 	ldrex	r3, [r3]
 8002904:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002908:	f023 0310 	bic.w	r3, r3, #16
 800290c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	330c      	adds	r3, #12
 8002916:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800291a:	65ba      	str	r2, [r7, #88]	; 0x58
 800291c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e3      	bne.n	80028f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe f925 	bl	8000b82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002946:	b29b      	uxth	r3, r3
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	b29b      	uxth	r3, r3
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8b6 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002954:	e09c      	b.n	8002a90 <HAL_UART_IRQHandler+0x518>
 8002956:	bf00      	nop
 8002958:	08002c0d 	.word	0x08002c0d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002964:	b29b      	uxth	r3, r3
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 808e 	beq.w	8002a94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8089 	beq.w	8002a94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	e853 3f00 	ldrex	r3, [r3]
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029a6:	647a      	str	r2, [r7, #68]	; 0x44
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e3      	bne.n	8002982 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3314      	adds	r3, #20
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	623b      	str	r3, [r7, #32]
   return(result);
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f023 0301 	bic.w	r3, r3, #1
 80029d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3314      	adds	r3, #20
 80029da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029de:	633a      	str	r2, [r7, #48]	; 0x30
 80029e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e6:	e841 2300 	strex	r3, r2, [r1]
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e3      	bne.n	80029ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0310 	bic.w	r3, r3, #16
 8002a16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	330c      	adds	r3, #12
 8002a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a24:	61fa      	str	r2, [r7, #28]
 8002a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	69b9      	ldr	r1, [r7, #24]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	617b      	str	r3, [r7, #20]
   return(result);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e3      	bne.n	8002a00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f83b 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a4a:	e023      	b.n	8002a94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <HAL_UART_IRQHandler+0x4f4>
 8002a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f8e5 	bl	8002c34 <UART_Transmit_IT>
    return;
 8002a6a:	e014      	b.n	8002a96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <HAL_UART_IRQHandler+0x51e>
 8002a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f924 	bl	8002cd2 <UART_EndTransmit_IT>
    return;
 8002a8a:	e004      	b.n	8002a96 <HAL_UART_IRQHandler+0x51e>
    return;
 8002a8c:	bf00      	nop
 8002a8e:	e002      	b.n	8002a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a90:	bf00      	nop
 8002a92:	e000      	b.n	8002a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a94:	bf00      	nop
  }
}
 8002a96:	37e8      	adds	r7, #232	; 0xe8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	88fa      	ldrh	r2, [r7, #6]
 8002af4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2222      	movs	r2, #34	; 0x22
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0220 	orr.w	r2, r2, #32
 8002b3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b095      	sub	sp, #84	; 0x54
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	330c      	adds	r3, #12
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	e853 3f00 	ldrex	r3, [r3]
 8002b5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b70:	643a      	str	r2, [r7, #64]	; 0x40
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b78:	e841 2300 	strex	r3, r2, [r1]
 8002b7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e5      	bne.n	8002b50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	e853 3f00 	ldrex	r3, [r3]
 8002b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ba4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e5      	bne.n	8002b84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d119      	bne.n	8002bf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f023 0310 	bic.w	r3, r3, #16
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002be0:	61ba      	str	r2, [r7, #24]
 8002be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be4:	6979      	ldr	r1, [r7, #20]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	e841 2300 	strex	r3, r2, [r1]
 8002bec:	613b      	str	r3, [r7, #16]
   return(result);
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e5      	bne.n	8002bc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c02:	bf00      	nop
 8002c04:	3754      	adds	r7, #84	; 0x54
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff ff41 	bl	8002aae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b21      	cmp	r3, #33	; 0x21
 8002c46:	d13e      	bne.n	8002cc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c50:	d114      	bne.n	8002c7c <UART_Transmit_IT+0x48>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d110      	bne.n	8002c7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]
 8002c7a:	e008      	b.n	8002c8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	1c59      	adds	r1, r3, #1
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6211      	str	r1, [r2, #32]
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fed2 	bl	8002a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b08c      	sub	sp, #48	; 0x30
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b22      	cmp	r3, #34	; 0x22
 8002d14:	f040 80ae 	bne.w	8002e74 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d20:	d117      	bne.n	8002d52 <UART_Receive_IT+0x50>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d113      	bne.n	8002d52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	1c9a      	adds	r2, r3, #2
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d50:	e026      	b.n	8002da0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d64:	d007      	beq.n	8002d76 <UART_Receive_IT+0x74>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <UART_Receive_IT+0x82>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e008      	b.n	8002d96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4619      	mov	r1, r3
 8002dae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d15d      	bne.n	8002e70 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0220 	bic.w	r2, r2, #32
 8002dc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d135      	bne.n	8002e66 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e20:	623a      	str	r2, [r7, #32]
 8002e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	69f9      	ldr	r1, [r7, #28]
 8002e26:	6a3a      	ldr	r2, [r7, #32]
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e5      	bne.n	8002e00 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d10a      	bne.n	8002e58 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff fe2e 	bl	8002ac0 <HAL_UARTEx_RxEventCallback>
 8002e64:	e002      	b.n	8002e6c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fd f970 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e002      	b.n	8002e76 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3730      	adds	r7, #48	; 0x30
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eba:	f023 030c 	bic.w	r3, r3, #12
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2c      	ldr	r2, [pc, #176]	; (8002f94 <UART_SetConfig+0x114>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d103      	bne.n	8002ef0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ee8:	f7fe fc78 	bl	80017dc <HAL_RCC_GetPCLK2Freq>
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	e002      	b.n	8002ef6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ef0:	f7fe fc60 	bl	80017b4 <HAL_RCC_GetPCLK1Freq>
 8002ef4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009a      	lsls	r2, r3, #2
 8002f00:	441a      	add	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <UART_SetConfig+0x118>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	0119      	lsls	r1, r3, #4
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009a      	lsls	r2, r3, #2
 8002f20:	441a      	add	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <UART_SetConfig+0x118>)
 8002f2e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	2064      	movs	r0, #100	; 0x64
 8002f36:	fb00 f303 	mul.w	r3, r0, r3
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	3332      	adds	r3, #50	; 0x32
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <UART_SetConfig+0x118>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f4c:	4419      	add	r1, r3
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009a      	lsls	r2, r3, #2
 8002f58:	441a      	add	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <UART_SetConfig+0x118>)
 8002f66:	fba3 0302 	umull	r0, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2064      	movs	r0, #100	; 0x64
 8002f6e:	fb00 f303 	mul.w	r3, r0, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	3332      	adds	r3, #50	; 0x32
 8002f78:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <UART_SetConfig+0x118>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	440a      	add	r2, r1
 8002f8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40013800 	.word	0x40013800
 8002f98:	51eb851f 	.word	0x51eb851f

08002f9c <Car_Control>:
static Motor_TypeDef Right_Motor;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;

void Car_Control(CarState state, uint8_t speed)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	460a      	mov	r2, r1
 8002fa6:	71fb      	strb	r3, [r7, #7]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71bb      	strb	r3, [r7, #6]
	Left_Motor.speed = speed;
 8002fac:	4a2d      	ldr	r2, [pc, #180]	; (8003064 <Car_Control+0xc8>)
 8002fae:	79bb      	ldrb	r3, [r7, #6]
 8002fb0:	71d3      	strb	r3, [r2, #7]
	Right_Motor.speed = speed;
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <Car_Control+0xcc>)
 8002fb4:	79bb      	ldrb	r3, [r7, #6]
 8002fb6:	71d3      	strb	r3, [r2, #7]
 switch (state)
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d84d      	bhi.n	800305a <Car_Control+0xbe>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <Car_Control+0x28>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fd9 	.word	0x08002fd9
 8002fc8:	08002ff3 	.word	0x08002ff3
 8002fcc:	0800300d 	.word	0x0800300d
 8002fd0:	08003027 	.word	0x08003027
 8002fd4:	08003041 	.word	0x08003041
 {
 case Car_stop:

	Left_Motor.state = Motor_Stop;
 8002fd8:	4b22      	ldr	r3, [pc, #136]	; (8003064 <Car_Control+0xc8>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	719a      	strb	r2, [r3, #6]
	Right_Motor.state = Motor_Stop;
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <Car_Control+0xcc>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	719a      	strb	r2, [r3, #6]
	Motor_Control(&Left_Motor);
 8002fe4:	481f      	ldr	r0, [pc, #124]	; (8003064 <Car_Control+0xc8>)
 8002fe6:	f000 f861 	bl	80030ac <Motor_Control>
	Motor_Control(&Right_Motor);
 8002fea:	481f      	ldr	r0, [pc, #124]	; (8003068 <Car_Control+0xcc>)
 8002fec:	f000 f85e 	bl	80030ac <Motor_Control>
	break;
 8002ff0:	e033      	b.n	800305a <Car_Control+0xbe>
 case Car_Forward:

		Left_Motor.state = Motor_CW;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <Car_Control+0xc8>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	719a      	strb	r2, [r3, #6]
		Right_Motor.state = Motor_CW;
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <Car_Control+0xcc>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	719a      	strb	r2, [r3, #6]
		Motor_Control(&Left_Motor);
 8002ffe:	4819      	ldr	r0, [pc, #100]	; (8003064 <Car_Control+0xc8>)
 8003000:	f000 f854 	bl	80030ac <Motor_Control>
		Motor_Control(&Right_Motor);
 8003004:	4818      	ldr	r0, [pc, #96]	; (8003068 <Car_Control+0xcc>)
 8003006:	f000 f851 	bl	80030ac <Motor_Control>
		break;
 800300a:	e026      	b.n	800305a <Car_Control+0xbe>
 case Car_Backward:

		Left_Motor.state = Motor_CCW;
 800300c:	4b15      	ldr	r3, [pc, #84]	; (8003064 <Car_Control+0xc8>)
 800300e:	2202      	movs	r2, #2
 8003010:	719a      	strb	r2, [r3, #6]
		Right_Motor.state = Motor_CCW;
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <Car_Control+0xcc>)
 8003014:	2202      	movs	r2, #2
 8003016:	719a      	strb	r2, [r3, #6]
		Motor_Control(&Left_Motor);
 8003018:	4812      	ldr	r0, [pc, #72]	; (8003064 <Car_Control+0xc8>)
 800301a:	f000 f847 	bl	80030ac <Motor_Control>
		Motor_Control(&Right_Motor);
 800301e:	4812      	ldr	r0, [pc, #72]	; (8003068 <Car_Control+0xcc>)
 8003020:	f000 f844 	bl	80030ac <Motor_Control>
		break;
 8003024:	e019      	b.n	800305a <Car_Control+0xbe>
 case Car_Left:

		Left_Motor.state = Motor_Stop;
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <Car_Control+0xc8>)
 8003028:	2200      	movs	r2, #0
 800302a:	719a      	strb	r2, [r3, #6]
		Right_Motor.state = Motor_CW;
 800302c:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <Car_Control+0xcc>)
 800302e:	2201      	movs	r2, #1
 8003030:	719a      	strb	r2, [r3, #6]
		Motor_Control(&Left_Motor);
 8003032:	480c      	ldr	r0, [pc, #48]	; (8003064 <Car_Control+0xc8>)
 8003034:	f000 f83a 	bl	80030ac <Motor_Control>
		Motor_Control(&Right_Motor);
 8003038:	480b      	ldr	r0, [pc, #44]	; (8003068 <Car_Control+0xcc>)
 800303a:	f000 f837 	bl	80030ac <Motor_Control>
		break;
 800303e:	e00c      	b.n	800305a <Car_Control+0xbe>
 case Car_Right:

		Left_Motor.state = Motor_CW;
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <Car_Control+0xc8>)
 8003042:	2201      	movs	r2, #1
 8003044:	719a      	strb	r2, [r3, #6]
		Right_Motor.state = Motor_Stop;
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <Car_Control+0xcc>)
 8003048:	2200      	movs	r2, #0
 800304a:	719a      	strb	r2, [r3, #6]
		Motor_Control(&Left_Motor);
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <Car_Control+0xc8>)
 800304e:	f000 f82d 	bl	80030ac <Motor_Control>
		Motor_Control(&Right_Motor);
 8003052:	4805      	ldr	r0, [pc, #20]	; (8003068 <Car_Control+0xcc>)
 8003054:	f000 f82a 	bl	80030ac <Motor_Control>
		break;
 8003058:	bf00      	nop
 }

}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000108 	.word	0x20000108
 8003068:	20000118 	.word	0x20000118

0800306c <Car_Init>:
void Car_Init()
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af02      	add	r7, sp, #8
	Motor_Init(&Left_Motor, &htim1, TIM_CHANNEL_1, GPIO_PIN_14, GPIOB);
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <Car_Init+0x30>)
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800307a:	2200      	movs	r2, #0
 800307c:	4908      	ldr	r1, [pc, #32]	; (80030a0 <Car_Init+0x34>)
 800307e:	4809      	ldr	r0, [pc, #36]	; (80030a4 <Car_Init+0x38>)
 8003080:	f000 f8a0 	bl	80031c4 <Motor_Init>
	Motor_Init(&Right_Motor, &htim1, TIM_CHANNEL_2,GPIO_PIN_15, GPIOB);
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <Car_Init+0x30>)
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800308c:	2204      	movs	r2, #4
 800308e:	4904      	ldr	r1, [pc, #16]	; (80030a0 <Car_Init+0x34>)
 8003090:	4805      	ldr	r0, [pc, #20]	; (80030a8 <Car_Init+0x3c>)
 8003092:	f000 f897 	bl	80031c4 <Motor_Init>

}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40010c00 	.word	0x40010c00
 80030a0:	20000028 	.word	0x20000028
 80030a4:	20000108 	.word	0x20000108
 80030a8:	20000118 	.word	0x20000118

080030ac <Motor_Control>:
 */

#include "motor.h"

void Motor_Control (Motor_TypeDef *motor)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	uint16_t ccr = (uint16_t)motor->speed*999/10;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	79db      	ldrb	r3, [r3, #7]
 80030b8:	461a      	mov	r2, r3
 80030ba:	f240 33e7 	movw	r3, #999	; 0x3e7
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	4a3f      	ldr	r2, [pc, #252]	; (80031c0 <Motor_Control+0x114>)
 80030c4:	fb82 1203 	smull	r1, r2, r2, r3
 80030c8:	1092      	asrs	r2, r2, #2
 80030ca:	17db      	asrs	r3, r3, #31
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	81fb      	strh	r3, [r7, #14]
	switch (motor->state)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	799b      	ldrb	r3, [r3, #6]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d044      	beq.n	8003162 <Motor_Control+0xb6>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	dc6c      	bgt.n	80031b6 <Motor_Control+0x10a>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <Motor_Control+0x3a>
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d01b      	beq.n	800311c <Motor_Control+0x70>
			HAL_TIM_PWM_Start(motor->timer, motor->channel);
			break;
		}

	}
}
 80030e4:	e067      	b.n	80031b6 <Motor_Control+0x10a>
			HAL_GPIO_WritePin(motor->port, motor->pin, RESET);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6898      	ldr	r0, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	899b      	ldrh	r3, [r3, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	4619      	mov	r1, r3
 80030f2:	f7fd ff7d 	bl	8000ff0 <HAL_GPIO_WritePin>
			if (motor->channel == TIM_CHANNEL_1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	889b      	ldrh	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <Motor_Control+0x5c>
					motor->timer->Instance->CCR1 = 0;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2200      	movs	r2, #0
 8003106:	635a      	str	r2, [r3, #52]	; 0x34
			if (motor->channel == TIM_CHANNEL_2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	889b      	ldrh	r3, [r3, #4]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d151      	bne.n	80031b4 <Motor_Control+0x108>
					motor->timer->Instance->CCR2 = 0;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800311a:	e04b      	b.n	80031b4 <Motor_Control+0x108>
			HAL_GPIO_WritePin(motor->port, motor->pin, SET);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6898      	ldr	r0, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	899b      	ldrh	r3, [r3, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	4619      	mov	r1, r3
 8003128:	f7fd ff62 	bl	8000ff0 <HAL_GPIO_WritePin>
			if (motor->channel == TIM_CHANNEL_1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	889b      	ldrh	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d104      	bne.n	800313e <Motor_Control+0x92>
					motor->timer->Instance->CCR1 = ccr;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	89fa      	ldrh	r2, [r7, #14]
 800313c:	635a      	str	r2, [r3, #52]	; 0x34
			if (motor->channel == TIM_CHANNEL_2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	889b      	ldrh	r3, [r3, #4]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d104      	bne.n	8003150 <Motor_Control+0xa4>
					motor->timer->Instance->CCR2 = ccr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	89fa      	ldrh	r2, [r7, #14]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(motor->timer, motor->channel);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7fe fc18 	bl	8001990 <HAL_TIM_PWM_Start>
			break;
 8003160:	e029      	b.n	80031b6 <Motor_Control+0x10a>
			HAL_GPIO_WritePin(motor->port, motor->pin, RESET);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6898      	ldr	r0, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	899b      	ldrh	r3, [r3, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	4619      	mov	r1, r3
 800316e:	f7fd ff3f 	bl	8000ff0 <HAL_GPIO_WritePin>
			if (motor->channel == TIM_CHANNEL_1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	889b      	ldrh	r3, [r3, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d107      	bne.n	800318a <Motor_Control+0xde>
					motor->timer->Instance->CCR1 = 999-ccr;
 800317a:	89fb      	ldrh	r3, [r7, #14]
 800317c:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003180:	3303      	adds	r3, #3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	6353      	str	r3, [r2, #52]	; 0x34
			if (motor->channel == TIM_CHANNEL_2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	889b      	ldrh	r3, [r3, #4]
 800318e:	2b04      	cmp	r3, #4
 8003190:	d107      	bne.n	80031a2 <Motor_Control+0xf6>
					motor->timer->Instance->CCR2 = 999-ccr;
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8003198:	3303      	adds	r3, #3
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6812      	ldr	r2, [r2, #0]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	6393      	str	r3, [r2, #56]	; 0x38
			HAL_TIM_PWM_Start(motor->timer, motor->channel);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	889b      	ldrh	r3, [r3, #4]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7fe fbef 	bl	8001990 <HAL_TIM_PWM_Start>
			break;
 80031b2:	e000      	b.n	80031b6 <Motor_Control+0x10a>
			break;
 80031b4:	bf00      	nop
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	66666667 	.word	0x66666667

080031c4 <Motor_Init>:


void Motor_Init (Motor_TypeDef *motor,TIM_HandleTypeDef *htim, uint16_t channel,uint16_t motor_pin, GPIO_TypeDef *motor_port)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	460b      	mov	r3, r1
 80031d4:	80fb      	strh	r3, [r7, #6]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80bb      	strh	r3, [r7, #4]
	motor->timer = htim;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	601a      	str	r2, [r3, #0]
	motor->channel = channel;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	88fa      	ldrh	r2, [r7, #6]
 80031e4:	809a      	strh	r2, [r3, #4]
	motor->port = motor_port;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	609a      	str	r2, [r3, #8]
	motor->pin = motor_pin;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88ba      	ldrh	r2, [r7, #4]
 80031f0:	819a      	strh	r2, [r3, #12]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <memset>:
 80031fc:	4603      	mov	r3, r0
 80031fe:	4402      	add	r2, r0
 8003200:	4293      	cmp	r3, r2
 8003202:	d100      	bne.n	8003206 <memset+0xa>
 8003204:	4770      	bx	lr
 8003206:	f803 1b01 	strb.w	r1, [r3], #1
 800320a:	e7f9      	b.n	8003200 <memset+0x4>

0800320c <__libc_init_array>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	2600      	movs	r6, #0
 8003210:	4d0c      	ldr	r5, [pc, #48]	; (8003244 <__libc_init_array+0x38>)
 8003212:	4c0d      	ldr	r4, [pc, #52]	; (8003248 <__libc_init_array+0x3c>)
 8003214:	1b64      	subs	r4, r4, r5
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	42a6      	cmp	r6, r4
 800321a:	d109      	bne.n	8003230 <__libc_init_array+0x24>
 800321c:	f000 f81a 	bl	8003254 <_init>
 8003220:	2600      	movs	r6, #0
 8003222:	4d0a      	ldr	r5, [pc, #40]	; (800324c <__libc_init_array+0x40>)
 8003224:	4c0a      	ldr	r4, [pc, #40]	; (8003250 <__libc_init_array+0x44>)
 8003226:	1b64      	subs	r4, r4, r5
 8003228:	10a4      	asrs	r4, r4, #2
 800322a:	42a6      	cmp	r6, r4
 800322c:	d105      	bne.n	800323a <__libc_init_array+0x2e>
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	f855 3b04 	ldr.w	r3, [r5], #4
 8003234:	4798      	blx	r3
 8003236:	3601      	adds	r6, #1
 8003238:	e7ee      	b.n	8003218 <__libc_init_array+0xc>
 800323a:	f855 3b04 	ldr.w	r3, [r5], #4
 800323e:	4798      	blx	r3
 8003240:	3601      	adds	r6, #1
 8003242:	e7f2      	b.n	800322a <__libc_init_array+0x1e>
 8003244:	08003298 	.word	0x08003298
 8003248:	08003298 	.word	0x08003298
 800324c:	08003298 	.word	0x08003298
 8003250:	0800329c 	.word	0x0800329c

08003254 <_init>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr

08003260 <_fini>:
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	bf00      	nop
 8003264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003266:	bc08      	pop	{r3}
 8003268:	469e      	mov	lr, r3
 800326a:	4770      	bx	lr
